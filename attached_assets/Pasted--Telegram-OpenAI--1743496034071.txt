# –ü–æ–¥–≥–æ—Ç–æ–≤–∏–º –∫–æ–¥ –¥–ª—è Telegram-–±–æ—Ç–∞, —á—Ç–æ–±—ã –æ–Ω –º–æ–≥ —É–º–Ω–æ –æ—Ç–≤–µ—á–∞—Ç—å –≤ –≥—Ä—É–ø–ø–∞—Ö —Å –ø–æ–º–æ—â—å—é OpenAI
# –≠—Ç–æ—Ç –∫–æ–¥ –Ω—É–∂–Ω–æ –≤—Å—Ç–∞–≤–∏—Ç—å –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –±–æ—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, main.py) –≤ Replit

code = '''
import openai
import telebot
import os

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω—ã –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

bot = telebot.TeleBot(TELEGRAM_TOKEN)
openai.api_key = OPENAI_API_KEY

# –û–ø—Ä–µ–¥–µ–ª–∏–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –±–æ—Ç –±—É–¥–µ—Ç —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å
TRIGGER_KEYWORDS = ["—Å–ø–∏–Ω–∞", "–¥–∞–≤–ª–µ–Ω–∏–µ", "–∑—É–±", "—Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥", "—Ü–µ–Ω–∞", "–º–∏–æ–º–∞", "–∂–µ–Ω—Å–∫–æ–µ", "–±–µ—Å–ø–ª–æ–¥–∏–µ", "–≥—Ä—ã–∂–∞", "–∫–æ—Å–º–µ—Ç–æ–ª–æ–≥", "—Ç—É—Ä", "–ª–µ—á–µ–Ω–∏–µ", "–∑–∞–ø–∏—Å–∞—Ç—å—Å—è"]

# –§—É–Ω–∫—Ü–∏—è: –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, —Å—Ç–æ–∏—Ç –ª–∏ –æ—Ç–≤–µ—á–∞—Ç—å
def should_respond(message_text):
    lowered = message_text.lower()
    return any(keyword in lowered for keyword in TRIGGER_KEYWORDS)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(func=lambda message: True)
def handle_all_messages(message):
    if message.chat.type in ["group", "supergroup"]:
        if should_respond(message.text):
            response = ask_openai(message.text)
            bot.reply_to(message, response)
    elif message.chat.type == "private":
        response = ask_openai(message.text)
        bot.reply_to(message, response)

# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∫ OpenAI
def ask_openai(prompt):
    try:
        completion = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "–¢—ã ‚Äî –∑–∞–±–æ—Ç–ª–∏–≤—ã–π, —É–º–Ω—ã–π –∏ –∫—Ä–∞—Ç–∫–∏–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –î–æ–∫—Ç–æ—Ä–∞ –•—É. –û—Ç–≤–µ—á–∞–π —Å —Ç–µ–ø–ª–æ—Ç–æ–π, –Ω–æ –ø–æ –¥–µ–ª—É, –∫–æ—Ä–æ—Ç–∫–æ. –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å —Å–ª–æ–∂–Ω—ã–π –∏–ª–∏ –Ω–µ–ø–æ–Ω—è—Ç–Ω—ã–π ‚Äî –ø—Ä–µ–¥–ª–æ–∂–∏ –Ω–∞–ø–∏—Å–∞—Ç—å –¥–æ–∫—Ç–æ—Ä—É –Ω–∞–ø—Ä—è–º—É—é."},
                {"role": "user", "content": prompt}
            ],
            max_tokens=100,
            temperature=0.7
        )
        return completion.choices[0].message["content"].strip()
    except Exception as e:
        return "–ü—Ä–æ—à—É –ø—Ä–æ—â–µ–Ω–∏—è, –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞. –ù–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∫—Ç–æ—Ä—É –Ω–∞–ø—Ä—è–º—É—é üôè"

print("ü§ñ –£–º–Ω—ã–π –±–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç –≥—Ä—É–ø–ø—É...")
bot.polling()
'''

code
